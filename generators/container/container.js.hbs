/* eslint-disable flowtype/require-parameter-type */
/* eslint-disable flowtype/require-return-type */

import React, {  Component  } from "react";
import PropTypes from "prop-types";
{{#if wantRedux}}
import { connect } from "react-redux";
import { bindActionCreators  } from "redux";
{{/if}}
{{#if config.isReactNative}}
import {
  View,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  Image,
  Keyboard,
  LayoutAnimation
} from "react-native";
{{else}}
import Helmet from "react-helmet";
import { Col, Row } from "{{ config.paths.kitFolder }}/grid";

import routesObject from "../../routesObject";
{{/if}}



{{#if wantLang}}
import LanguageProvider from "../../core/LanguageProvider";
import lang from "./{{ properCase name }}.lang.js";
{{/if}}

{{#if wantRedux}}
import * as {{ camelCase name }}Actions from "./{{ properCase name }}.actions";
{{/if}}
{{#if wantStyles}}
import styles from "./{{ properCase name }}.styles.{{ config.stylesExtension }}";
{{/if}}


{{#if wantLang}}
@LanguageProvider
{{/if}}
class {{ properCase name }} extends Component {

  static navigationOptions = ({ navigation }) => ({
    title: {{ properCase name }},
    headerRight: null,
    headerLeft: null
  });

  {{#if wantLang}}
  static getLang() {
    return lang;
  }
  {{/if}}

  constructor(props, context) {
    super(props, context);
  }

  // componentWillMount() {}
  // componentDidMount() {}
  // componentWillReceiveProps(nextProps, nextContext) {}
  // shouldComponentUpdate(nextProps, nextState, nextContext) {}
  // componentWillUpdate(nextProps, nextState, nextContext) {}
  // componentDidUpdate(prevProps, prevState, prevContext)
  // componentWillUnmount() {}

  render() {
    return (
      {{#if config.isReactNative}}
      <Text>{{ properCase name }}</Text>
      {{else}}
      <div id="{{ dashCase name }}" className="page">
        <Helmet>
          <title>{this.props.route.headTitle}</title>
          <meta name="description" content="" />
          <meta name="keywords" content="" />
        </Helmet>
        <div className="container">
          <h1>{{ properCase name }}</h1>
        </div>
      </div>
      {{/if}}
    );
  }
}

{{#if wantRedux}}
{{ properCase name }}.propTypes = {
  state: PropTypes.object.isRequired,
  dispatch: PropTypes.func,
  {{#if config.isReactNative}}
  navigation: PropTypes.object.isRequired,
  {{else}}
  location: PropTypes.object.isRequired,
  route: PropTypes.object.isRequired,
  routeParams: PropTypes.object.isRequired,
  router: PropTypes.object.isRequired,
  {{/if}}
  actions: PropTypes.object.isRequired,
  formState: PropTypes.object
};

{{ properCase name }}.contextTypes = {
};

const mapStateToProps = (state) => {
  return {
    state: state.{{ camelCase name }},
    formState: state.form
  };
};

const mapDispatchToProps = (dispatch) => ({
  actions: bindActionCreators({{ camelCase name }}Actions, dispatch),
  dispatch
});


export default connect(mapStateToProps, mapDispatchToProps)({{ properCase name }});

{{else}}
{{ properCase name }}.propTypes = {
};

{{ properCase name }}.contextTypes = {
};

export default {{ properCase name }};
{{/if}}
